{"version":3,"sources":["asset/logo.png","actions/index.jsx","components/all.js","components/soilmoisture.js","components/soilTemperature.js","components/airTemperature.js","components/airHumidity.js","components/solarRadiation.js","components/soilPh.js","config/navRoute.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Parse","require","getSensorData","a","samples","Query","limit","equalTo","find","data","dataOfSensor","JSON","parse","stringify","console","log","message","getFliterSensorData","start","end","startDate","Date","toDate","endDate","Data","Object","extend","innerQuery","greaterThan","query","lessThan","mainQuery","and","lessThanOrEqualTo","result","all","props","UNSAFE_componentWillMount","action","then","sensorData","setState","loader","catch","err","state","sensorChartData","this","map","item","soilTemprature","airTemprature","push","x","createdAt","y1","y5","soilPh","y3","soilMoisture","y4","y2","airHumidity","span","height","titleMap","Component","RangePicker","DatePicker","lable","toDateString","getHours","getMinutes","chartData","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","onOk","value","justify","style","width","showTime","format","onChange","solarRadiation","NavRoute","src","newLogo","alt","marginTop","marginBottom","onClick","history","path","exact","component","All","SoilMoisture","SoilTemperature","AirTemperature","AirHumidity","initialize","serverURL","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.90d9b89d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.020b222d.png\";","var Parse = require(\"parse\");\n\nexport const getSensorData = async () => {\n  const samples = new Parse.Query(\"Data\");\n\n  samples.limit(2000);\n  samples.equalTo(\"deviceId\", \"SLMTEST130220001\");\n\n  try {\n    let data = await samples.find();\n    var dataOfSensor = JSON.parse(JSON.stringify(data));\n    // console.table(dataOfSensor);\n    return dataOfSensor;\n  } catch (error) {\n    console.log(error);\n    return error.message;\n  }\n};\n\nexport const getFliterSensorData = async (start, end) => {\n  if (start != null && end != null) {\n    const startDate = new Date(start.toDate());\n    const endDate = new Date(end.toDate());\n\n    var Data = Parse.Object.extend(\"Data\");\n    var innerQuery = new Parse.Query(Data);\n    innerQuery.limit(2000);\n    innerQuery.greaterThan(\"createdAt\", startDate);\n\n    var query = new Parse.Query(Data);\n\n    query.lessThan = (\"createdAt\", endDate);\n    query.limit(2000);\n    var mainQuery = Parse.Query.and(\n      query.greaterThan(\"createdAt\", startDate),\n      query.lessThanOrEqualTo(\"createdAt\", endDate)\n    );\n    mainQuery.limit(2000)\n\n    try {\n      let result = mainQuery.find();\n      // var dataOfSensor = JSON.parse(JSON.stringify(result));\n      return result;\n    } catch (err) {\n      return err;\n    }\n  }\n};\n","import React, { Component } from \"react\";\nimport { Row, Col, Spin } from \"antd\";\nimport * as action from \"../actions\";\nimport { TimelineChart } from \"ant-design-pro/lib/Charts\";\n\nexport default class all extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loader: true\n    };\n  }\n\n  UNSAFE_componentWillMount = async () => {\n    await action\n      .getSensorData()\n      .then(sensorData => {\n        this.setState({ data: sensorData, loader: false });\n      })\n      .catch(err => console.log(err));\n\n    await console.log(this.state.loader);\n  };\n\n  render() {\n    const sensorChartData = [];\n    this.state.data.map(async item =>\n      item.soilTemprature === -127 ||\n      item.airTemprature === null\n        ? \"\"\n        : sensorChartData.push({\n            x: new Date(item.createdAt) + 19800,\n            y1: item.airTemprature,\n            y5: item.soilPh,\n            y3: item.soilMoisture,\n            y4: item.soilTemprature,\n            y2: item.airHumidity\n          })\n    );\n   //  console.table(this.state.data);\n    \n    return this.state.loader ? (\n      <h2>\n        <Spin /> Loading......\n      </h2>\n    ) : (\n      <Row>\n        <Col span={24}>\n          <TimelineChart\n            height={550}\n            data={sensorChartData}\n            titleMap={{\n              y1: \"Air Temprature\",\n              y2: \"soilPh\",\n            }}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Row, Col, Spin, DatePicker } from \"antd\";\nimport * as action from \"../actions\";\n// import { MiniBar } from \"ant-design-pro/lib/Charts\";\nimport { Line } from \"react-chartjs-2\";\n\nconst { RangePicker } = DatePicker;\n\n// let count = 0;\n\nexport default class all extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loader: true,\n      lable: [],\n      dataOfSensor: [],\n      chartData: {}\n    };\n  }\n\n  UNSAFE_componentWillMount = async () => {\n    await action\n      .getSensorData()\n      .then(sensorData => {\n        this.setState({ data: sensorData, loader: false });\n      })\n      .catch(err => console.log(err));\n\n    await console.log(this.state.loader);\n\n    let lable = [];\n    let dataOfSensor = [];\n\n    await this.state.data.map(async item => {\n      lable.push(\n        new Date(item.createdAt).toDateString() +\n          \" \" +\n          new Date(item.createdAt).getHours() +\n          \" : \" +\n          new Date(item.createdAt).getMinutes()\n      );\n      dataOfSensor.push(item.soilMoisture);\n    });\n\n    await this.setState({\n      chartData: {\n        labels: lable,\n        datasets: [\n          {\n            label: \"Soil Moisture\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(91,179,88,0.4)\",\n            borderColor: \"rgba(91,179,88,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(91,179,88,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: dataOfSensor\n          }\n        ]\n      }\n    });\n  };\n\n  onOk = async value => {\n    console.log(\"onOk: \", value);\n    if (value[0] != null && value[1] != null) {\n      let lable = [];\n      let dataOfSensor = [];\n\n      await action\n        .getFliterSensorData(value[0], value[1])\n        .then(data => {\n          var dataOfSensor = JSON.parse(JSON.stringify(data));\n          this.setState({ data: dataOfSensor });\n          //  console.log(dataOfSensor);\n        })\n        .catch(err => console.log(err));\n\n      console.log(this.state.data);\n\n      await this.state.data.map(async item => {\n        lable.push(\n          new Date(item.createdAt).toDateString() +\n            \" \" +\n            new Date(item.createdAt).getHours() +\n            \":\" +\n            new Date(item.createdAt).getMinutes()\n        );\n        dataOfSensor.push(item.soilMoisture);\n      });\n\n      await this.setState({\n        chartData: {\n          labels: lable,\n          datasets: [\n            {\n              label: \"Soil Moisture\",\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: \"rgba(91,179,88,0.4)\",\n              borderColor: \"rgba(91,179,88,1)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBorderColor: \"rgba(91,179,88,1)\",\n              pointBackgroundColor: \"#fff\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n              pointHoverBorderColor: \"rgba(220,220,220,1)\",\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: dataOfSensor\n            }\n          ]\n        }\n      });\n    }\n  };\n\n  render() {\n    //  console.table(this.state.data);\n\n    return this.state.loader ? (\n      <h2>\n        <Spin /> Loading......\n      </h2>\n    ) : (\n      <Row>\n        <Row justify=\"center\" style={{ width: \"100%\" }}>\n          <Col>\n            <RangePicker\n              showTime={{ format: \"HH:mm\" }}\n              format=\"YYYY-MM-DD HH:mm\"\n              onChange={this.onChange}\n              onOk={this.onOk}\n            />\n          </Col>\n        </Row>\n\n        <Col span={24}>\n          <Line height={100} data={this.state.chartData} />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Row, Col, Spin, DatePicker } from \"antd\";\nimport * as action from \"../actions\";\n// import { MiniBar } from \"ant-design-pro/lib/Charts\";\nimport { Line } from \"react-chartjs-2\";\n\nconst { RangePicker } = DatePicker;\n\n// let count = 0;\n\nexport default class all extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loader: true,\n      lable: [],\n      dataOfSensor: [],\n      chartData: {}\n    };\n  }\n\n  UNSAFE_componentWillMount = async () => {\n    await action\n      .getSensorData()\n      .then(sensorData => {\n        this.setState({ data: sensorData, loader: false });\n      })\n      .catch(err => console.log(err));\n\n    await console.log(this.state.loader);\n\n    let lable = [];\n    let dataOfSensor = [];\n\n    await this.state.data.map(async item =>\n      item.soilTemprature === -127\n        ? \"\"\n        : lable.push(\n            new Date(item.createdAt).toDateString() +\n              \" \" +\n              new Date(item.createdAt).getHours() +\n              \":\" +\n              new Date(item.createdAt).getMinutes()\n          )\n    );\n\n    await this.state.data.map(async item =>\n      item.soilTemprature === -127 ? \"\" : dataOfSensor.push(item.soilTemprature)\n    );\n\n    await this.setState({\n      chartData: {\n        labels: lable,\n        datasets: [\n          {\n            label: \"Soil Temprature\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(91,179,88,0.4)\",\n            borderColor: \"rgba(91,179,88,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(91,179,88,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: dataOfSensor\n          }\n        ]\n      }\n    });\n  };\n\n  onOk = async value => {\n    console.log(\"onOk: \", value);\n    if (value[0] != null && value[1] != null) {\n      let lable = [];\n      let dataOfSensor = [];\n\n      await action\n        .getFliterSensorData(value[0], value[1])\n        .then(data => {\n          var dataOfSensor = JSON.parse(JSON.stringify(data));\n          this.setState({ data: dataOfSensor });\n          //  console.log(dataOfSensor);\n        })\n        .catch(err => console.log(err));\n\n      console.log(this.state.data);\n\n      await this.state.data.map(async item =>\n        item.soilTemprature === -127\n          ? \"\"\n          : lable.push(\n              new Date(item.createdAt).toDateString() +\n                \" \" +\n                new Date(item.createdAt).getHours() +\n                \":\" +\n                new Date(item.createdAt).getMinutes()\n            )\n      );\n\n      await this.state.data.map(async item =>\n        item.soilTemprature === -127\n          ? \"\"\n          : dataOfSensor.push(item.soilTemprature)\n      );\n\n      await this.setState({\n        chartData: {\n          labels: lable,\n          datasets: [\n            {\n              label: \"Soil Temprature\",\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: \"rgba(91,179,88,0.4)\",\n              borderColor: \"rgba(91,179,88,1)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBorderColor: \"rgba(91,179,88,1)\",\n              pointBackgroundColor: \"#fff\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n              pointHoverBorderColor: \"rgba(220,220,220,1)\",\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: dataOfSensor\n            }\n          ]\n        }\n      });\n    }\n  };\n\n  render() {\n    //  console.table(this.state.data);\n\n    return this.state.loader ? (\n      <h2>\n        <Spin /> Loading......\n      </h2>\n    ) : (\n      <Row>\n        <Row justify=\"center\" style={{ width: \"100%\" }}>\n          <Col>\n            <RangePicker\n              showTime={{ format: \"HH:mm\" }}\n              format=\"YYYY-MM-DD HH:mm\"\n              onChange={this.onChange}\n              onOk={this.onOk}\n            />\n          </Col>\n        </Row>\n\n        <Col span={24}>\n          <Line height={100} data={this.state.chartData} />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Row, Col, Spin, DatePicker } from \"antd\";\nimport * as action from \"../actions\";\n// import { MiniBar } from \"ant-design-pro/lib/Charts\";\nimport { Line } from \"react-chartjs-2\";\n\nconst { RangePicker } = DatePicker;\n\n// let count = 0;\n\nexport default class all extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loader: true,\n      lable: [],\n      dataOfSensor: [],\n      chartData: {}\n    };\n  }\n\n  UNSAFE_componentWillMount = async () => {\n    await action\n      .getSensorData()\n      .then(sensorData => {\n        this.setState({ data: sensorData, loader: false });\n      })\n      .catch(err => console.log(err));\n\n    await console.log(this.state.loader);\n\n    let lable = [];\n    let dataOfSensor = [];\n\n    await this.state.data.map(async item =>\n      item.airTemprature === null\n        ? \"\"\n        : lable.push(\n            new Date(item.createdAt).toDateString() +\n              \" \" +\n              new Date(item.createdAt).getHours() +\n              \":\" +\n              new Date(item.createdAt).getMinutes()\n          )\n    );\n\n    await this.state.data.map(async item =>\n      item.airTemprature === null ? \"\" : dataOfSensor.push(item.airTemprature)\n    );\n\n    await this.setState({\n      chartData: {\n        labels: lable,\n        datasets: [\n          {\n            label: \"Soil Temprature\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(91,179,88,0.4)\",\n            borderColor: \"rgba(91,179,88,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(91,179,88,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: dataOfSensor\n          }\n        ]\n      }\n    });\n  };\n\n  onOk = async value => {\n    console.log(\"onOk: \", value);\n    if (value[0] != null && value[1] != null) {\n      let lable = [];\n      let dataOfSensor = [];\n\n      await action\n        .getFliterSensorData(value[0], value[1])\n        .then(data => {\n          var dataOfSensor = JSON.parse(JSON.stringify(data));\n          this.setState({ data: dataOfSensor });\n          //  console.log(dataOfSensor);\n        })\n        .catch(err => console.log(err));\n\n      console.log(this.state.data);\n\n      await this.state.data.map(async item =>\n        item.airTemprature === null\n          ? \"\"\n          : lable.push(\n              new Date(item.createdAt).toDateString() +\n                \" \" +\n                new Date(item.createdAt).getHours() +\n                \":\" +\n                new Date(item.createdAt).getMinutes()\n            )\n      );\n\n      await this.state.data.map(async item =>\n        item.airTemprature === null\n          ? \"\"\n          : dataOfSensor.push(item.airTemprature)\n      );\n\n      await this.setState({\n        chartData: {\n          labels: lable,\n          datasets: [\n            {\n              label: \"Air Temprature\",\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: \"rgba(91,179,88,0.4)\",\n              borderColor: \"rgba(91,179,88,1)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBorderColor: \"rgba(91,179,88,1)\",\n              pointBackgroundColor: \"#fff\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n              pointHoverBorderColor: \"rgba(220,220,220,1)\",\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: dataOfSensor\n            }\n          ]\n        }\n      });\n    }\n  };\n\n  render() {\n    //  console.table(this.state.data);\n\n    return this.state.loader ? (\n      <h2>\n        <Spin /> Loading......\n      </h2>\n    ) : (\n      <Row>\n        <Row justify=\"center\" style={{ width: \"100%\" }}>\n          <Col>\n            <RangePicker\n              showTime={{ format: \"HH:mm\" }}\n              format=\"YYYY-MM-DD HH:mm\"\n              onChange={this.onChange}\n              onOk={this.onOk}\n            />\n          </Col>\n        </Row>\n\n        <Col span={24}>\n          <Line height={100} data={this.state.chartData} />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Row, Col, Spin, DatePicker } from \"antd\";\nimport * as action from \"../actions\";\n// import { MiniBar } from \"ant-design-pro/lib/Charts\";\nimport { Line } from \"react-chartjs-2\";\n\nconst { RangePicker } = DatePicker;\n\n// let count = 0;\n\nexport default class all extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loader: true,\n      lable: [],\n      dataOfSensor: [],\n      chartData: {}\n    };\n  }\n\n  UNSAFE_componentWillMount = async () => {\n    await action\n      .getSensorData()\n      .then(sensorData => {\n        this.setState({ data: sensorData, loader: false });\n      })\n      .catch(err => console.log(err));\n\n    await console.log(this.state.loader);\n\n    let lable = [];\n    let dataOfSensor = [];\n\n    await this.state.data.map(async item => {\n      lable.push(\n        new Date(item.createdAt).toDateString() +\n          \" \" +\n          new Date(item.createdAt).getHours() +\n          \" : \" +\n          new Date(item.createdAt).getMinutes()\n      );\n      dataOfSensor.push(item.airHumidity);\n    });\n\n    await this.setState({\n      chartData: {\n        labels: lable,\n        datasets: [\n          {\n            label: \"Air Humidity\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(91,179,88,0.4)\",\n            borderColor: \"rgba(91,179,88,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(91,179,88,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: dataOfSensor\n          }\n        ]\n      }\n    });\n  };\n\n  onOk = async value => {\n    console.log(\"onOk: \", value);\n    if (value[0] != null && value[1] != null) {\n      let lable = [];\n      let dataOfSensor = [];\n\n      await action\n        .getFliterSensorData(value[0], value[1])\n        .then(data => {\n          var dataOfSensor = JSON.parse(JSON.stringify(data));\n          this.setState({ data: dataOfSensor });\n          //  console.log(dataOfSensor);\n        })\n        .catch(err => console.log(err));\n\n      console.log(this.state.data);\n\n      await this.state.data.map(async item => {\n        lable.push(\n          new Date(item.createdAt).toDateString() +\n            \" \" +\n            new Date(item.createdAt).getHours() +\n            \":\" +\n            new Date(item.createdAt).getMinutes()\n        );\n        dataOfSensor.push(item.airHumidity);\n      });\n\n      await this.setState({\n        chartData: {\n          labels: lable,\n          datasets: [\n            {\n              label: \"Air Humidity\",\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: \"rgba(91,179,88,0.4)\",\n              borderColor: \"rgba(91,179,88,1)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBorderColor: \"rgba(91,179,88,1)\",\n              pointBackgroundColor: \"#fff\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n              pointHoverBorderColor: \"rgba(220,220,220,1)\",\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: dataOfSensor\n            }\n          ]\n        }\n      });\n    }\n  };\n\n  render() {\n    //  console.table(this.state.data);\n\n    return this.state.loader ? (\n      <h2>\n        <Spin /> Loading......\n      </h2>\n    ) : (\n      <Row>\n        <Row justify=\"center\" style={{ width: \"100%\" }}>\n          <Col>\n            <RangePicker\n              showTime={{ format: \"HH:mm\" }}\n              format=\"YYYY-MM-DD HH:mm\"\n              onChange={this.onChange}\n              onOk={this.onOk}\n            />\n          </Col>\n        </Row>\n\n        <Col span={24}>\n          <Line height={100} data={this.state.chartData} />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Row, Col, Spin, DatePicker } from \"antd\";\nimport * as action from \"../actions\";\n// import { MiniBar } from \"ant-design-pro/lib/Charts\";\nimport { Line } from \"react-chartjs-2\";\n\nconst { RangePicker } = DatePicker;\n\n// let count = 0;\n\nexport default class all extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loader: true,\n      lable: [],\n      dataOfSensor: [],\n      chartData: {}\n    };\n  }\n\n  UNSAFE_componentWillMount = async () => {\n    await action\n      .getSensorData()\n      .then(sensorData => {\n        this.setState({ data: sensorData, loader: false });\n      })\n      .catch(err => console.log(err));\n\n    await console.log(this.state.loader);\n\n    let lable = [];\n    let dataOfSensor = [];\n\n    await this.state.data.map(async item => {\n      lable.push(\n        new Date(item.createdAt).toDateString() +\n          \" \" +\n          new Date(item.createdAt).getHours() +\n          \" : \" +\n          new Date(item.createdAt).getMinutes()\n      );\n      dataOfSensor.push(item.solarRadiation);\n    });\n\n    await this.setState({\n      chartData: {\n        labels: lable,\n        datasets: [\n          {\n            label: \"Solar Radiation\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(91,179,88,0.4)\",\n            borderColor: \"rgba(91,179,88,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(91,179,88,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: dataOfSensor\n          }\n        ]\n      }\n    });\n  };\n\n  onOk = async value => {\n    console.log(\"onOk: \", value);\n    if (value[0] != null && value[1] != null) {\n      let lable = [];\n      let dataOfSensor = [];\n\n      await action\n        .getFliterSensorData(value[0], value[1])\n        .then(data => {\n          var dataOfSensor = JSON.parse(JSON.stringify(data));\n          this.setState({ data: dataOfSensor });\n          //  console.log(dataOfSensor);\n        })\n        .catch(err => console.log(err));\n\n      console.log(this.state.data);\n\n      await this.state.data.map(async item => {\n        lable.push(\n          new Date(item.createdAt).toDateString() +\n            \" \" +\n            new Date(item.createdAt).getHours() +\n            \":\" +\n            new Date(item.createdAt).getMinutes()\n        );\n        dataOfSensor.push(item.solarRadiation);\n      });\n\n      await this.setState({\n        chartData: {\n          labels: lable,\n          datasets: [\n            {\n              label: \"Solar Radiation\",\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: \"rgba(91,179,88,0.4)\",\n              borderColor: \"rgba(91,179,88,1)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBorderColor: \"rgba(91,179,88,1)\",\n              pointBackgroundColor: \"#fff\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n              pointHoverBorderColor: \"rgba(220,220,220,1)\",\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: dataOfSensor\n            }\n          ]\n        }\n      });\n    }\n  };\n\n  render() {\n    //  console.table(this.state.data);\n\n    return this.state.loader ? (\n      <h2>\n        <Spin /> Loading......\n      </h2>\n    ) : (\n      <Row>\n        <Row justify=\"center\" style={{ width: \"100%\" }}>\n          <Col>\n            <RangePicker\n              showTime={{ format: \"HH:mm\" }}\n              format=\"YYYY-MM-DD HH:mm\"\n              onChange={this.onChange}\n              onOk={this.onOk}\n            />\n          </Col>\n        </Row>\n\n        <Col span={24}>\n          <Line height={100} data={this.state.chartData} />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Row, Col, Spin, DatePicker } from \"antd\";\nimport * as action from \"../actions\";\n// import { MiniBar } from \"ant-design-pro/lib/Charts\";\nimport { Line } from \"react-chartjs-2\";\n\nconst { RangePicker } = DatePicker;\n\n// let count = 0;\n\nexport default class all extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loader: true,\n      lable: [],\n      dataOfSensor: [],\n      chartData: {}\n    };\n  }\n\n  UNSAFE_componentWillMount = async () => {\n    await action\n      .getSensorData()\n      .then(sensorData => {\n        this.setState({ data: sensorData, loader: false });\n      })\n      .catch(err => console.log(err));\n\n    await console.log(this.state.loader);\n\n    let lable = [];\n    let dataOfSensor = [];\n\n    await this.state.data.map(async item => {\n      lable.push(\n        new Date(item.createdAt).toDateString() +\n          \" \" +\n          new Date(item.createdAt).getHours() +\n          \" : \" +\n          new Date(item.createdAt).getMinutes()\n      );\n      dataOfSensor.push(item.soilPh);\n    });\n\n    await this.setState({\n      chartData: {\n        labels: lable,\n        datasets: [\n          {\n            label: \"Soil pH\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(91,179,88,0.4)\",\n            borderColor: \"rgba(91,179,88,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(91,179,88,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: dataOfSensor\n          }\n        ]\n      }\n    });\n  };\n\n  onOk = async value => {\n    console.log(\"onOk: \", value);\n    if (value[0] != null && value[1] != null) {\n      let lable = [];\n      let dataOfSensor = [];\n\n      await action\n        .getFliterSensorData(value[0], value[1])\n        .then(data => {\n          var dataOfSensor = JSON.parse(JSON.stringify(data));\n          this.setState({ data: dataOfSensor });\n          //  console.log(dataOfSensor);\n        })\n        .catch(err => console.log(err));\n\n      console.log(this.state.data);\n\n      await this.state.data.map(async item => {\n        lable.push(\n          new Date(item.createdAt).toDateString() +\n            \" \" +\n            new Date(item.createdAt).getHours() +\n            \":\" +\n            new Date(item.createdAt).getMinutes()\n        );\n        dataOfSensor.push(item.soilPh);\n      });\n\n      await this.setState({\n        chartData: {\n          labels: lable,\n          datasets: [\n            {\n              label: \"Soil pH\",\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: \"rgba(91,179,88,0.4)\",\n              borderColor: \"rgba(91,179,88,1)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBorderColor: \"rgba(91,179,88,1)\",\n              pointBackgroundColor: \"#fff\",\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: \"rgba(91,179,88,1)\",\n              pointHoverBorderColor: \"rgba(220,220,220,1)\",\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: dataOfSensor\n            }\n          ]\n        }\n      });\n    }\n  };\n\n  render() {\n    //  console.table(this.state.data);\n\n    return this.state.loader ? (\n      <h2>\n        <Spin /> Loading......\n      </h2>\n    ) : (\n      <Row>\n        <Row justify=\"center\" style={{ width: \"100%\" }}>\n          <Col>\n            <RangePicker\n              showTime={{ format: \"HH:mm\" }}\n              format=\"YYYY-MM-DD HH:mm\"\n              onChange={this.onChange}\n              onOk={this.onOk}\n            />\n          </Col>\n        </Row>\n\n        <Col span={24}>\n          <Line height={100} data={this.state.chartData} />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport newLogo from \"../asset/logo.png\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { Row, Col, Button } from \"antd\";\nimport All from \"../components/all\";\nimport SoilMoisture from \"../components/soilmoisture\";\nimport SoilTemperature from \"../components/soilTemperature\";\nimport AirTemperature from \"../components/airTemperature\";\nimport AirHumidity from \"../components/airHumidity\";\nimport solarRadiation from \"../components/solarRadiation\";\nimport soilPh from \"../components/soilPh\";\n\nexport default class NavRoute extends Component {\n  render() {\n    return (\n      <Row>\n        <Col span={24}>\n          <Row justify=\"center\">\n            <Col>\n              <img src={newLogo} alt=\"logo\" width={300} />\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24} style={{ marginTop: 10, marginBottom: 10 }}>\n          <Row justify=\"center\">\n            <Col>\n              <Button\n                onClick={() => {\n                  this.props.history.push(\"/chart\");\n                }}\n              >\n                All\n              </Button>\n              <Button\n                onClick={() => {\n                  this.props.history.push(\"/chart/soilmoisture\");\n                }}\n              >\n                Soil Moisture\n              </Button>\n              <Button\n                onClick={() => {\n                  this.props.history.push(\"/chart/soiltemperature\");\n                }}\n              >\n                Soil Temperature\n              </Button>\n              <Button\n                onClick={() => {\n                  this.props.history.push(\"/chart/soilph\");\n                }}\n              >\n                Soil pH\n              </Button>\n              <Button\n                onClick={() => {\n                  this.props.history.push(\"/chart/airtemperature\");\n                }}\n              >\n                Air Temperature\n              </Button>\n              <Button\n                onClick={() => {\n                  this.props.history.push(\"/chart/airhumidity\");\n                }}\n              >\n                Air Humidity\n              </Button>\n              <Button\n                onClick={() => {\n                  this.props.history.push(\"/chart/solarradiation\");\n                }}\n              >\n                Solar Radiation\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <HashRouter>\n            <Route path=\"/chart\" exact component={All} />\n            <Route path=\"/chart/soilmoisture\" component={SoilMoisture} />\n            <Route path=\"/chart/soiltemperature\" component={SoilTemperature} />\n            <Route path=\"/chart/soilph\" component={soilPh} />\n            <Route path=\"/chart/airtemperature\" component={AirTemperature} />\n            <Route path=\"/chart/airhumidity\" component={AirHumidity} />\n            <Route path=\"/chart/solarradiation\" component={solarRadiation} />\n          </HashRouter>\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React from \"react\";\nimport NavRoute from \"./config/navRoute\";\nimport \"antd/dist/antd.css\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"./index.css\";\n\nvar Parse = require(\"parse\");\nParse.initialize(\n  \"mitti-backend\",\n  \"vMvvybc1z4*Q$!J*k4P4NNx\",\n  \"vMvvybc1z4*Q$!J*k4P4NNx\"\n);\nParse.serverURL = \"https://mitti-backend-monorepo.herokuapp.com/api\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Route path=\"/\" exact component={NavRoute} />\n      <Route path=\"/chart\" component={NavRoute} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}